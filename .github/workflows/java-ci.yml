name: Java CI Pipeline

on:
  push:
    branches: [develop]
  pull_request:
    branches: [main]

jobs:
  build:
    name: Build and Test Java Application
    runs-on: ubuntu-latest
    env:
      API_SECRET_KEY: ${{ secrets.API_SECRET_KEY }}
      MYSQL_PORT: ${{ secrets.MYSQL_PORT }}
      MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
      MYSQL_USER: ${{ secrets.MYSQL_USER }}
      MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
      MYSQL_URL: ${{ secrets.MYSQL_URL }}
      EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
      EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
      USER_EMAIL: ${{ secrets.USER_EMAIL }}
      EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
      REDIS_HOST: ${{ secrets.REDIS_HOST }}
      REDIS_PORT: ${{ secrets.REDIS_PORT }}
    steps:
      # Checkout do código da branch
      - name: Checkout code
        uses: actions/checkout@v2

      # Cache do Maven para acelerar builds
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Setup do JDK 21
      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'temurin'

      # Sobe os serviços com Docker Compose
      - name: Start Docker Compose
        run: docker compose -f ./docker/docker-compose.yaml up -d

      # Compila e executa os testes
      - name: Build and Test
        run: mvn clean verify

      # Verifica estilo de código
     # - name: Run Checkstyle
      #  run: mvn checkstyle:check

      # Gera o .jar final
      - name: Build JAR file
        run: mvn package -DskipTests

      # Encerra os containers
      - name: Stop Docker Compose
        if: always()
        run: docker compose -f ./docker/docker-compose.yaml down

